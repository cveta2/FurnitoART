// <auto-generated />
using System;
using ASPProjekat.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASPProjekat.DataAccess.Migrations
{
    [DbContext(typeof(ProjekatContext))]
    [Migration("20220531142514_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ASPProject.Domain.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<string>("UseCaseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UseCaseName");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ASPProject.Domain.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ASPProject.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Table",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(2682),
                            IsActive = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Bed",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(5584),
                            IsActive = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Chair",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(5632),
                            IsActive = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Decoration",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(6916),
                            IsActive = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Dining table",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7276),
                            IsActive = false,
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Coffee table",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7326),
                            IsActive = false,
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Desk",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7336),
                            IsActive = false,
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Computer table",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7346),
                            IsActive = false,
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Single bed",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7356),
                            IsActive = false,
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Duble bed",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7370),
                            IsActive = false,
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Sofa",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7382),
                            IsActive = false,
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Two-seater",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7393),
                            IsActive = false,
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Three-seater",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7403),
                            IsActive = false,
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Dining chair",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7413),
                            IsActive = false,
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Computer chair",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7423),
                            IsActive = false,
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "Office chair",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7434),
                            IsActive = false,
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 17,
                            CategoryName = "Children's chair",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7442),
                            IsActive = false,
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 18,
                            CategoryName = "Garden chair",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7454),
                            IsActive = false,
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 19,
                            CategoryName = "Wardrobe",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7463),
                            IsActive = false
                        },
                        new
                        {
                            Id = 20,
                            CategoryName = "Shelf",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7472),
                            IsActive = false
                        },
                        new
                        {
                            Id = 21,
                            CategoryName = "Bookshelf",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7482),
                            IsActive = false,
                            ParentCategoryId = 20
                        },
                        new
                        {
                            Id = 22,
                            CategoryName = "Wall shelf",
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(7493),
                            IsActive = false,
                            ParentCategoryId = 20
                        });
                });

            modelBuilder.Entity("ASPProject.Domain.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccuredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLogs");
                });

            modelBuilder.Entity("ASPProject.Domain.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ASPProject.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ASPProject.Domain.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ASPProject.Domain.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PriceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("ASPProject.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductName")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 190, DateTimeKind.Local).AddTicks(3530),
                            Description = "This coffee table with glass surface will elevate the look of your space. It is perfect for luxury homes.",
                            IsActive = false,
                            ProductName = "Cheney coffee table"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 190, DateTimeKind.Local).AddTicks(6620),
                            Description = "Golden details on this table makes it look really refinedand we are sure that this is the right choice if you are looking for something simple yet effective.",
                            IsActive = false,
                            ProductName = "Aula coffee table"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 190, DateTimeKind.Local).AddTicks(6649),
                            Description = "Made of solid wood with fine details and a smooth surface, the Andreson set of coffee tables brings a classic charm to your room.",
                            IsActive = false,
                            ProductName = "Andreson coffee tables"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 190, DateTimeKind.Local).AddTicks(6656),
                            Description = "Haku is dining table for 6 persons. As gold and glass are erfect match, we are sure that this table will be perfect in any type of home.",
                            IsActive = false,
                            ProductName = "Haku dining table"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 190, DateTimeKind.Local).AddTicks(6663),
                            Description = "Mora is dining table for 4 persons. ",
                            IsActive = false,
                            ProductName = "Mora dining table"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 21,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 190, DateTimeKind.Local).AddTicks(6677),
                            Description = "White bookshelf gives you so much freedom to decorate it in any way you like! You can store books, magazines or any type of decoration pieces.",
                            IsActive = false,
                            ProductName = "Marcel bookshelf"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 16,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 190, DateTimeKind.Local).AddTicks(6683),
                            Description = "Adjust the height and angle of this chair to make you comfortable during the working day. The mesh backrest leaks air, so you won't heat the chair even when the workload increases.",
                            IsActive = false,
                            ProductName = "Markus office chair"
                        });
                });

            modelBuilder.Entity("ASPProject.Domain.ProductSpecification", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int");

                    b.Property<string>("SpecificationValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "SpecificationId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("ProductSpecifications");
                });

            modelBuilder.Entity("ASPProject.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ASPProject.Domain.RoleUseCase", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UseCaseId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UseCaseId");

                    b.ToTable("RoleUseCases");
                });

            modelBuilder.Entity("ASPProject.Domain.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SpecificationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Specifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 189, DateTimeKind.Local).AddTicks(5193),
                            IsActive = false,
                            SpecificationName = "Width"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 189, DateTimeKind.Local).AddTicks(6963),
                            IsActive = false,
                            SpecificationName = "Height"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 189, DateTimeKind.Local).AddTicks(7000),
                            IsActive = false,
                            SpecificationName = "Length"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 189, DateTimeKind.Local).AddTicks(7013),
                            IsActive = false,
                            SpecificationName = "Depth"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 189, DateTimeKind.Local).AddTicks(7024),
                            IsActive = false,
                            SpecificationName = "Color"
                        });
                });

            modelBuilder.Entity("ASPProject.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 183, DateTimeKind.Local).AddTicks(1632),
                            Email = "johnsmith@gmail.com",
                            FirstName = "John",
                            IsActive = false,
                            LastName = "Smith",
                            Password = "password",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(832),
                            Email = "mikelegend@gmail.com",
                            FirstName = "Mike",
                            IsActive = false,
                            LastName = "Legend",
                            Password = "password",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(898),
                            Email = "mariajameson@gmail.com",
                            FirstName = "Maria",
                            IsActive = false,
                            LastName = "Jameson",
                            Password = "password",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(908),
                            Email = "juliawilliams@gmail.com",
                            FirstName = "Julia",
                            IsActive = false,
                            LastName = "Williams",
                            Password = "password",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(914),
                            Email = "micheleroberts@gmail.com",
                            FirstName = "Michele",
                            IsActive = false,
                            LastName = "Roberts",
                            Password = "password",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 5, 31, 16, 25, 13, 188, DateTimeKind.Local).AddTicks(930),
                            Email = "anastasija@gmail.com",
                            FirstName = "Anastasija",
                            IsActive = false,
                            LastName = "Jokovic",
                            Password = "password",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("ASPProject.Domain.Cart", b =>
                {
                    b.HasOne("ASPProject.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPProject.Domain.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPProject.Domain.Category", b =>
                {
                    b.HasOne("ASPProject.Domain.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ASPProject.Domain.Image", b =>
                {
                    b.HasOne("ASPProject.Domain.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ASPProject.Domain.Order", b =>
                {
                    b.HasOne("ASPProject.Domain.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPProject.Domain.OrderItem", b =>
                {
                    b.HasOne("ASPProject.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPProject.Domain.Product", "Product")
                        .WithMany("InOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ASPProject.Domain.Price", b =>
                {
                    b.HasOne("ASPProject.Domain.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ASPProject.Domain.Product", b =>
                {
                    b.HasOne("ASPProject.Domain.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ASPProject.Domain.ProductSpecification", b =>
                {
                    b.HasOne("ASPProject.Domain.Product", "Product")
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASPProject.Domain.Specification", "Specification")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("ASPProject.Domain.RoleUseCase", b =>
                {
                    b.HasOne("ASPProject.Domain.Role", "Role")
                        .WithMany("RoleUseCases")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ASPProject.Domain.User", b =>
                {
                    b.HasOne("ASPProject.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ASPProject.Domain.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ASPProject.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ASPProject.Domain.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("InOrderItems");

                    b.Navigation("Prices");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("ASPProject.Domain.Role", b =>
                {
                    b.Navigation("RoleUseCases");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ASPProject.Domain.Specification", b =>
                {
                    b.Navigation("ProductSpecifications");
                });

            modelBuilder.Entity("ASPProject.Domain.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
